import calendar
from datetime import datetime

class Caregiver:
    def __init__(self, name, phone, email, pay_rate=20):

        #Initialize a Caregiver object.
    
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours_worked = 0  # Tracks assigned hours
        self.availability = {
            'AM': 'available',
            'PM': 'available'
        }

    def set_availability(self, shift, status):

        #Update the caregiver's availability for a given shift.

        if shift in self.availability and status in ['preferred', 'available', 'unavailable']:
            self.availability[shift] = status
        else:
            print("Invalid shift or status!")

    def __str__(self):
       
        #Return a string representation of the caregiver.

        return (f"Caregiver: {self.name}, Phone: {self.phone}, Email: {self.email}, "
                f"Pay Rate: ${self.pay_rate}/hr, Hours Worked: {self.hours_worked}")

# Scheduler Class
class Scheduler:
    def __init__(self):
    
        #Initialize the Scheduler with an empty list of caregivers.

        self.caregivers = []

## Add add_caregiver method to add caregivers to the scheduler.
def add_caregiver(self, caregiver):
    if isinstance(caregiver, Caregiver):
        self.caregivers.append(caregiver)
    else:
        print("Invalid caregiver object!")

## Add list_caregivers method to list all caregivers.
def list_caregivers(self):
    for caregiver in self.caregivers:
        print(caregiver)

# Begin generate_schedule method to generate a calendar for the given month and year.

def generate_schedule(self, year, month):
    cal = calendar.HTMLCalendar()
    html_calendar = cal.formatmonth(year, month)
    print("\nGenerated Calendar:")
    print(html_calendar)

## Add logic in `generate_schedule` to assign caregivers to AM and PM shifts.
    print("\nAssigning caregivers to shifts...")
    for day in range(1, calendar.monthrange(year, month)[1] + 1):
        print(f"Day {day}:")
        am_assigned = False
        pm_assigned = False
        for caregiver in self.caregivers:
            if caregiver.availability['AM'] == 'preferred' and not am_assigned:
                print(f"  AM Shift: {caregiver.name} (preferred)")
                caregiver.hours_worked += 6
                am_assigned = True
            elif caregiver.availability['PM'] == 'preferred' and not pm_assigned:
                print(f"  PM Shift: {caregiver.name} (preferred)")
                caregiver.hours_worked += 6
                pm_assigned = True

        if not am_assigned:
            print("  AM Shift: No preferred caregiver available")
        if not pm_assigned:
            print("  PM Shift: No preferred caregiver available")



