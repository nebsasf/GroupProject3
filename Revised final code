import calendar
from datetime import datetime

class Caregiver:
    def __init__(self, name, phone, email, pay_rate=20):
        # Initialize a Caregiver object.
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours_worked = 0  # Tracks assigned hours
        self.availability = {
            'AM': 'available',
            'PM': 'available'
        }

    def set_availability(self, shift, status):
        # Update the caregiver's availability for a given shift.
        if shift in self.availability and status in ['preferred', 'available', 'unavailable']:
            self.availability[shift] = status
        else:
            print("Invalid shift or status!")

    def __str__(self):
        # Return a string representation of the caregiver.
        return (f"Caregiver: {self.name}, Phone: {self.phone}, Email: {self.email}, "
                f"Pay Rate: ${self.pay_rate}/hr, Hours Worked: {self.hours_worked}")


# Scheduler Class
class Scheduler:
    def __init__(self):
        # Initialize the Scheduler with an empty list of caregivers.
        self.caregivers = []

    def add_caregiver(self, caregiver):
        # Add caregiver to the scheduler.
        if isinstance(caregiver, Caregiver):
            self.caregivers.append(caregiver)
        else:
            print("Invalid caregiver object!")

    def list_caregivers(self):
        # List all caregivers in the system.
        for caregiver in self.caregivers:
            print(caregiver)

    def generate_schedule(self, year, month):
        # Generate a monthly schedule using caregivers' availability.
        cal = calendar.HTMLCalendar()
        html_calendar = cal.formatmonth(year, month)
        print("\nGenerated Calendar:")
        print(html_calendar)

        # Assign caregivers to shifts
        print("\nAssigning caregivers to shifts...")
        for day in range(1, calendar.monthrange(year, month)[1] + 1):
            print(f"Day {day}:")
            am_assigned = False
            pm_assigned = False
            for caregiver in self.caregivers:
                if caregiver.availability['AM'] == 'preferred' and not am_assigned:
                    print(f"  AM Shift: {caregiver.name} (preferred)")
                    caregiver.hours_worked += 6
                    am_assigned = True
                elif caregiver.availability['PM'] == 'preferred' and not pm_assigned:
                    print(f"  PM Shift: {caregiver.name} (preferred)")
                    caregiver.hours_worked += 6
                    pm_assigned = True

            if not am_assigned:
                print("  AM Shift: No preferred caregiver available")
            if not pm_assigned:
                print("  PM Shift: No preferred caregiver available")

    def calculate_pay(self):
        # Calculate and display weekly and monthly pay for all paid caregivers.
        total_weekly_pay = 0
        print("\nWeekly Pay Report:")
        for caregiver in self.caregivers:
            weekly_pay = caregiver.hours_worked * caregiver.pay_rate
            total_weekly_pay += weekly_pay
            print(f"  {caregiver.name}: ${weekly_pay:.2f}")
        print(f"\nTotal Weekly Pay: ${total_weekly_pay:.2f}")

        monthly_pay = total_weekly_pay * 4  # Assume 4 weeks in a month
        print(f"Total Monthly Pay: ${monthly_pay:.2f}")


# Main Program
if __name__ == "__main__":
    # Initialize the Scheduler
    scheduler = Scheduler()

    # Create sample caregivers
    caregiver1 = Caregiver("Alice Johnson", "555-1234", "alice@example.com")
    caregiver2 = Caregiver("Bob Smith", "555-5678", "bob@example.com", pay_rate=25)

    # Add caregivers to the scheduler
    scheduler.add_caregiver(caregiver1)
    scheduler.add_caregiver(caregiver2)

    # Set caregiver availability
    caregiver1.set_availability("AM", "preferred")
    caregiver2.set_availability("PM", "preferred")

    # List all caregivers
    print("\nCaregivers:")
    scheduler.list_caregivers()

    # Generate the schedule for the current month and year
    current_year = datetime.now().year
    current_month = datetime.now().month
    scheduler.generate_schedule(current_year, current_month)

    # Calculate and display pay
    scheduler.calculate_pay()
