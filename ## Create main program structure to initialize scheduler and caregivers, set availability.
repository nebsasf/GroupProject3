import calendar
from datetime import datetime

class Caregiver:
    def __init__(self, name, phone, email, pay_rate=20):

        #Initialize a Caregiver object.
    
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours_worked = 0  # Tracks assigned hours
        self.availability = {
            'AM': 'available',
            'PM': 'available'
        }

    def set_availability(self, shift, status):

        #Update the caregiver's availability for a given shift.

        if shift in self.availability and status in ['preferred', 'available', 'unavailable']:
            self.availability[shift] = status
        else:
            print("Invalid shift or status!")

    def __str__(self):
       
        #Return a string representation of the caregiver.

        return (f"Caregiver: {self.name}, Phone: {self.phone}, Email: {self.email}, "
                f"Pay Rate: ${self.pay_rate}/hr, Hours Worked: {self.hours_worked}")

# Scheduler Class
class Scheduler:
    def __init__(self):
    
        #Initialize the Scheduler with an empty list of caregivers.

        self.caregivers = []

## Add add_caregiver method to add caregivers to the scheduler.
def add_caregiver(self, caregiver):
    if isinstance(caregiver, Caregiver):
        self.caregivers.append(caregiver)
    else:
        print("Invalid caregiver object!")

## Add list_caregivers method to list all caregivers.
def list_caregivers(self):
    for caregiver in self.caregivers:
        print(caregiver)

# Begin generate_schedule method to generate a calendar for the given month and year.

def generate_schedule(self, year, month):
    cal = calendar.HTMLCalendar()
    html_calendar = cal.formatmonth(year, month)
    print("\nGenerated Calendar:")
    print(html_calendar)

## Add logic in `generate_schedule` to assign caregivers to AM and PM shifts.
    print("\nAssigning caregivers to shifts...")
    for day in range(1, calendar.monthrange(year, month)[1] + 1):
        print(f"Day {day}:")
        am_assigned = False
        pm_assigned = False
        for caregiver in self.caregivers:
            if caregiver.availability['AM'] == 'preferred' and not am_assigned:
                print(f"  AM Shift: {caregiver.name} (preferred)")
                caregiver.hours_worked += 6
                am_assigned = True
            elif caregiver.availability['PM'] == 'preferred' and not pm_assigned:
                print(f"  PM Shift: {caregiver.name} (preferred)")
                caregiver.hours_worked += 6
                pm_assigned = True

        if not am_assigned:
            print("  AM Shift: No preferred caregiver available")
        if not pm_assigned:
            print("  PM Shift: No preferred caregiver available")

## Add calculate_pay method to calculate weekly and monthly pay for caregivers.
def calculate_pay(self):
    total_weekly_pay = 0
    print("\nWeekly Pay Report:")
    for caregiver in self.caregivers:
        weekly_pay = caregiver.hours_worked * caregiver.pay_rate
        total_weekly_pay += weekly_pay
        print(f"  {caregiver.name}: ${weekly_pay:.2f}")
    print(f"\nTotal Weekly Pay: ${total_weekly_pay:.2f}")

    monthly_pay = total_weekly_pay * 4  # Assume 4 weeks in a month
    print(f"Total Monthly Pay: ${monthly_pay:.2f}")


## Create main program structure to initialize scheduler and caregivers, set availability.
if __name__ == "__main__":
    scheduler = Scheduler()

    caregiver1 = Caregiver("Alice Johnson", "555-1234", "alice@example.com")
    caregiver2 = Caregiver("Bob Smith", "555-5678", "bob@example.com", pay_rate=25)

    scheduler.add_caregiver(caregiver1)
    scheduler.add_caregiver(caregiver2)

    caregiver1.set_availability("AM", "preferred")
    caregiver2.set_availability("PM", "preferred")

## Generate schedule for the current month and year, and calculate the pay.
    print("\nCaregivers:")
    scheduler.list_caregivers()

    current_year = datetime.now().year
    current_month = datetime.now().month
    scheduler.generate_schedule(current_year, current_month)

    scheduler.calculate_pay()



